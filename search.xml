<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基本概念和术语</title>
      <link href="/2023/04/27/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E6%9C%AF%E8%AF%AD/"/>
      <url>/2023/04/27/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E6%9C%AF%E8%AF%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h1><h2 id="数据-1"><a href="#数据-1" class="headerlink" title="数据"></a>数据</h2><ul><li><p>是能输入计算机且能被计算机处理的各种符号的集合</p></li><li><p>信息的载体</p></li><li><p>是对客观事物符号化的表示</p></li><li><p>能够被计算机识别、存储和加工</p></li></ul><p><strong>包括</strong></p><ul><li>数值型的数据： 整数、实数等</li><li>非数值型的数据： 文字、图像、图形、声音等</li></ul><h1 id="数据元素和数据项"><a href="#数据元素和数据项" class="headerlink" title="数据元素和数据项"></a>数据元素和数据项</h1><h2 id="数据元素"><a href="#数据元素" class="headerlink" title="数据元素"></a>数据元素</h2><ul><li>是数据的<strong>基本单位</strong>，在计算机程序中通常作为一个整体进行考虑和处理。</li><li>也简称为元素，或称为记录、结点或顶点。</li><li>一个<strong>数据元素</strong>可由若干个<strong>数据项</strong>组成</li></ul><h2 id="数据项"><a href="#数据项" class="headerlink" title="数据项"></a>数据项</h2><ul><li>构成数据元素的不可分割的<strong>最小单位</strong>。</li><li>数据、数据元素、数据项三者之间的关系：</li></ul><p>​          <strong>数据  &gt;  数据  &gt;  数据项</strong> </p><p>​      例如： 学生表  个人记录  学号、姓名…</p><h1 id="数据对象"><a href="#数据对象" class="headerlink" title="数据对象"></a>数据对象</h1><ul><li>是<strong>性质相同的数据元素的集合</strong>，是数据的一个子集。</li></ul><p>例如： </p><ul><li><strong>整数</strong>数据对象是集合N&#x3D;{0, 1, 2….}</li><li><strong>字母</strong>字符数据对象是集合C&#x3D;{‘A’，‘B’,…}</li></ul><h1 id="数据元素与数据对象"><a href="#数据元素与数据对象" class="headerlink" title="数据元素与数据对象"></a>数据元素与数据对象</h1><ul><li><p>数据元素–组成数据的基本单位</p><ul><li>与数据的关系： 是集合的个体</li></ul></li><li><p>数据对象–性质相同的数据元素的集合</p><ul><li>与数据的关系是： 集合的子集</li></ul></li></ul><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h2><ul><li>数据元素不是孤立存在的，它们之间存在着某种关系，<strong>数据元素相互之间的关系称为结构</strong></li><li>是指<strong>相互之间存在一种或多种特定关系</strong>的数据元素集合</li><li>或者说，数据结构是<strong>带结构</strong>的数据元素的集合</li></ul><h2 id="数据结构包括以下三个方面的内容"><a href="#数据结构包括以下三个方面的内容" class="headerlink" title="数据结构包括以下三个方面的内容:"></a>数据结构包括以下三个方面的内容:</h2><ol><li>数据元素之间的逻辑关系，也称为<strong>逻辑结构</strong>。</li><li>数据元素及其关系在计算机内存中的表示(又称为<strong>映像</strong>)），称为数据的<strong>物理结构</strong>或数据的存储结构。</li><li>数据的<strong>运算和实现</strong>，即对数据元素可以施加的操作以及这些操作在相应的存储结构上的实现。</li></ol><h1 id="数据结构的两个层次"><a href="#数据结构的两个层次" class="headerlink" title="数据结构的两个层次"></a>数据结构的两个层次</h1><h2 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h2><ul><li>描述数据元素之间的逻辑关系</li><li>与数据的存储无关，独立于计算机</li><li>是从具体问题抽象出来的数学模型</li></ul><h2 id="物理结构-存储结构"><a href="#物理结构-存储结构" class="headerlink" title="物理结构(存储结构)"></a>物理结构(存储结构)</h2><ul><li>数据元素及其关系在计算机存储器中的结构(存储方式)</li><li>是数据结构在计算机中的表示</li></ul><h2 id="逻辑结构与存储结构的关系"><a href="#逻辑结构与存储结构的关系" class="headerlink" title="逻辑结构与存储结构的关系:"></a>逻辑结构与存储结构的关系:</h2><ul><li>存储结构是逻辑关系的映象与元素本身的映象。<br>逻辑结构是数据结构的抽象，存储结构是数据结构的实现</li><li>两者综合起来建立了数据元素之间的结构关系。</li></ul><h2 id="逻辑结构的种类"><a href="#逻辑结构的种类" class="headerlink" title="逻辑结构的种类"></a>逻辑结构的种类</h2><h3 id="划分方法一"><a href="#划分方法一" class="headerlink" title="划分方法一"></a>划分方法一</h3><p><strong>(1）线性结构</strong><br>            有且仅有一个开始和一个终端结点，并且所有结点都最多只有一个直接前趋和一个直接后继。<br>            例如:线性表、栈、队列、串</p><p><strong>(2）非线性结构</strong><br>           一个结点可能有多个直接前趋和直接后继</p><p>​           例如:树、图</p><h3 id="划分方式二——四类基本逻辑结构"><a href="#划分方式二——四类基本逻辑结构" class="headerlink" title="划分方式二——四类基本逻辑结构"></a>划分方式二——四类基本逻辑结构</h3><ol><li>**集合结构:**结构中的数据元素之间除了同属于一个集合的关系外，无任何其它关系。</li><li><strong>线性结构</strong>:结构中的数据元素之间存在着一对一的线性关系。</li><li>**树形结构:**结构中的数据元素之间存在着一对多的层次关系。</li><li><strong>图状结构或网状结构</strong>:<strong>结构中的数据元素之间存在着</strong>多对多**的任意关系。</li></ol><h3 id="四种基本的存储结构–1"><a href="#四种基本的存储结构–1" class="headerlink" title="四种基本的存储结构–1"></a>四种基本的存储结构–1</h3><h4 id="顺序存储结构"><a href="#顺序存储结构" class="headerlink" title="顺序存储结构:"></a>顺序存储结构:</h4><ul><li>用一组<strong>连续</strong>的存储单元<strong>依次</strong>存储数据元素，<strong>数据元素之间的逻辑关系</strong>由元素的<strong>存储位置</strong>来表示。</li><li>C语言中用<strong>数组</strong>来实现顺序存储结构</li></ul><h3 id="四种基本的存储结构–2"><a href="#四种基本的存储结构–2" class="headerlink" title="四种基本的存储结构–2"></a>四种基本的存储结构–2</h3><h4 id="链接存储结构"><a href="#链接存储结构" class="headerlink" title="链接存储结构:"></a>链接存储结构:</h4><ul><li>用一组<strong>任意</strong>的存储单元存储数据元素，数据元素之间的逻辑关系用<strong>指针</strong>来表示。</li><li>C语言中用指针来实现链式存储结构<br>例:(bat, cat, eat……,mat)</li></ul><h3 id="四种基本的存储结构–3索引存储结构"><a href="#四种基本的存储结构–3索引存储结构" class="headerlink" title="四种基本的存储结构–3索引存储结构"></a>四种基本的存储结构–3索引存储结构</h3><ul><li>在存储结点信息的同时，还建立附加的<strong>索引表</strong>。</li><li>索引表中的每示项称为、一个<strong>索引项</strong>，<br>索引项的<strong>一般形式</strong>是:(关键字，地址)</li><li>关键字是能<strong>唯一标识</strong>一个结点的那些数据项。</li><li>若每个结点在索引表中都有一个索引项，则该索引表称之为<strong>稠密索引</strong>(Dense Index)。若一组结点在索引表中只对应一个索引项，则该索引表称之为<strong>稀疏索引</strong>(Sparse Index)。</li></ul><h3 id="四种基本的存储结构–4"><a href="#四种基本的存储结构–4" class="headerlink" title="四种基本的存储结构–4"></a>四种基本的存储结构–4</h3><h4 id="散列存储结构"><a href="#散列存储结构" class="headerlink" title="散列存储结构"></a>散列存储结构</h4><ul><li><p>根据结点的关键字直接计算出该结点的存储地址。</p><p><img src="/../images/key1.png"></p><p>得到的散列表如下:</p><p><img src="/../images/%E6%95%A3%E5%88%97%E8%A1%A8.png"></p></li></ul><h1 id="数据类型和抽象数据类型"><a href="#数据类型和抽象数据类型" class="headerlink" title="数据类型和抽象数据类型"></a>数据类型和抽象数据类型</h1><ul><li><p>在使用高级程序设计语言编写程序时，必须对程序中出现的每个变量、常量或表达式，明确说明它们所属的<strong>数据类型</strong>。</p><ul><li>例如，C语言中:<ul><li>·提供int，char, float, double等基本数据类型</li><li>数组、结构、共用体、枚举等构造数据类型</li><li>还有指针、空(void)类型</li><li>用户也可用typedef自己定义数据类型</li></ul></li></ul></li><li><p>一些最基本数据结构可以用数据类型来实现，如数组、字符串等;</p></li><li><p>而另一些常用的数据结构，如栈、队列、树、图等，不能直接用数据类型来表示。</p></li><li><p>高级语言中的数据类型明显地或隐含地规定了在程序执行期间变量和表达的所有可能的取值范围，以及在这些数值范围上所允许进行的操作。</p><ul><li><p>例如，C语言中定义变量达int类型，就表示i是[-min,max]范围的整数在这个整数集上可以进行+、-、*、\、%等操作</p></li><li><p><strong>数据类型的作用</strong></p><ul><li><p>约束变量或常量的取值范围</p></li><li><p>约束变量或常量的操作。</p></li></ul></li></ul></li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li><p>定义：<strong>数据类型</strong>是一组性质相同的<strong>值的集合</strong>以及定义于这个值集合上的<strong>一组操作</strong>的总称。</p><p><strong>数据类型&#x3D;值的集合+值集合上的一组操作</strong></p></li></ul><h3 id="抽象数据模型"><a href="#抽象数据模型" class="headerlink" title="抽象数据模型"></a>抽象数据模型</h3><p><strong>是指一个数学模型以及定义在此数学模型上的一组操作</strong>。</p><ul><li>由用户定义,从问题抽象出<strong>数据模型</strong>（逻辑结构)</li><li>还包括定义在数据模型上的一组<strong>抽象运算</strong>(相关操作)</li><li>不考虑计算机内的具体存储结构与运算的具体实现算法</li></ul><h3 id="抽象数据类型的形式定义"><a href="#抽象数据类型的形式定义" class="headerlink" title="抽象数据类型的形式定义"></a>抽象数据类型的形式定义</h3><p>抽象数据类型可用(D，S,P)<strong>三元组</strong>表示。</p><p>其中:D是<strong>数据对象</strong>;</p><p>​         S是D上的<strong>关系集</strong>;</p><p>​         P是对D的<strong>基本操作集</strong>。</p><p><strong>一个抽象数据类型的定义格魂如下:</strong><br>ADT   <strong>抽象数据类型名</strong>{</p><p><strong>数据对象;&lt;数据对象的定义&gt;</strong></p><p><strong>数据关系:&lt;数据关系的定义&gt;</strong></p><p><strong>基本操作:&lt;基本操作的定义&gt;</strong></p><p>}ADT   <strong>抽象数据类型名</strong></p><p>其中:</p><ul><li><p>数据对象、数据关系的定义用伪代码描述</p></li><li><p>基本操作的定义格式为:</p><ul><li>基本操作名(参数表)</li><li>初始条件:〈初始条件描述〉</li><li>操作结果:〈操作结果描述〉</li></ul></li></ul><p><strong>基本操作</strong>定义格式说明:</p><p><strong>参数表</strong>:赋值参数只为操作提供输入值。</p><p>​            引用参数以&amp;打头，除可提供输入值外，还将返回操作结果。</p><p><strong>初始条件</strong>:描述操作执行之前数据结构和参数应满足的条件，若不满足，则操作失败，并返回相应出错信息。若初始条件为空，则省略之。<br><strong>操作结果</strong>:说明操作正常完成之后，数据结构的变化状况和应返回的结果。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组指针和指针数组</title>
      <link href="/2023/04/25/%E6%95%B0%E7%BB%84%E6%8C%87%E9%92%88%E5%92%8C%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84/"/>
      <url>/2023/04/25/%E6%95%B0%E7%BB%84%E6%8C%87%E9%92%88%E5%92%8C%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="数组指针和指针数组"><a href="#数组指针和指针数组" class="headerlink" title="数组指针和指针数组"></a>数组指针和指针数组</h1><p>首先，理解一下数组指针和指针数组这两个名词：</p><p>“数组指针”和“指针数组”，只要在名词中间加上“的”字，就知道中心了——</p><p>数组的指针：是一个指针，什么样的指针呢？指向数组的指针。</p><p>指针的数组：是一个数组，什么样的数组呢？装着指针的数组。</p><p>然后，需要明确一个优先级顺序：()&gt;[]&gt;*，所以：</p><p>(*p)[n]：根据优先级，先看括号内，则p是一个指针，这个指针指向一个一维数组，数组长度为n，这是“数组的指针”，即数组指针；</p><p><em>p[n]：根据优先级，先看[]，则p是一个数组，再结合</em>，这个数组的元素是指针类型，共n个元素，这是“指针的数组”，即指针数组。</p><p>根据上面两个分析，可以看出，p是什么，则词组的中心词就是什么，即数组“指针”和指针“数组”。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *p1[<span class="number">5</span>]；</span><br><span class="line"><span class="type">int</span> (*p2)[<span class="number">5</span>]；</span><br></pre></td></tr></table></figure><p>首先，对于语句“<code>int*p1[5]</code>”，因为“[]”的优先级要比“*”要高，所以 <code>p1</code> 先与“[]”结合，构成一个数组的定义，数组名为 p1，而“<code>int*</code>”修饰的是数组的内容，即数组的每个元素。也就是说，该数组包含 5 个指向 int 类型数据的指针。</p><p>其次，对于语句“<code>int(*p2)[5]</code>”，“()”的优先级比“[]”高，“<code>*</code>”号和 <code>p2</code> 构成一个指针的定义，指针变量名为 p2，而 int 修饰的是数组的内容，即数组的每个元素。也就是说，p2 是一个指针，它指向一个包含 5 个 int 类型数据的数组。</p><p>由此可见，对指针数组来说，首先它是一个数组，数组的元素都是指针，也就是说该数组存储的是指针，数组占多少个字节由数组本身决定；而对数组指针来说，首先它是一个指针，它指向一个数组，也就是说它是指向数组的指针。</p><h1 id="数组指针-p-n"><a href="#数组指针-p-n" class="headerlink" title="数组指针 (*p)[n]"></a>数组指针 <code>(*p)[n]</code></h1><p>数组指针：是指针——指向数组的指针。</p><pre><code>#include &lt;iostream&gt;int main()&#123;    //一维数组    int a[5] = &#123; 1, 2, 3, 4, 5 &#125;;    //步长为5的数组指针，即数组里有5个元素    int(*p)[5];    //把数组a的地址赋给p，则p为数组a的地址，则*p表示数组a本身    p = &amp;a;    //%p输出地址, %d输出十进制    //\n回车    //在C中，在几乎所有使用数组的表达式中，数组名的值是个指针常量，也就是数组第一个元素的地址，它的类型取决于数组元素的类型。    printf(&quot;%p\n&quot;, a); //输出数组名，一般用数组的首元素地址来标识一个数组，则输出数组首元素地址    printf(&quot;%p\n&quot;, p); //根据上面，p为数组a的地址，输出数组a的地址    printf(&quot;%p\n&quot;, *p); //*p表示数组a本身，一般用数组的首元素地址来标识一个数组    printf(&quot;%p\n&quot;, &amp;a[0]); //a[0]的地址    printf(&quot;%p\n&quot;, &amp;a[1]); //a[1]的地址    printf(&quot;%p\n&quot;, p[0]); //数组首元素的地址    printf(&quot;%d\n&quot;, **p); //*p为数组a本身，即为数组a首元素地址，则*(*p)为值，当*p为数组首元素地址时，**p表示首元素的值1    printf(&quot;%d\n&quot;, *p[0]); //根据优先级，p[0] 表示首元素地址，则*p[0]表示首元素本身，即首元素的值1    printf(&quot;%d\n&quot;, *p[1]); //为一个绝对值很大的负数，不表示a[1]...表示什么我还不知道    //将二维数组赋给指针    int b[3][4];    int(*pp)[4]; //定义一个数组指针，指向含4个元素的一维数组    pp = b; //将该二维数组的首地址赋给pp，也就是b[0]或&amp;b[0]，二维数组中pp=b和pp=&amp;b[0]是等价的    pp++; //pp=pp+1，该语句执行过后pp的指向从行b[0][]变为了行b[1][]，pp=&amp;b[1]    int k;    scanf_s(&quot;%d&quot;, &amp;k);    return 0;&#125;</code></pre><p><img src="/../images/szzz.png" alt="数组指针"></p><p>据上面二维数组可以得出，数组指针也称指向一维数组的指针，所以数组指针也称行指针。</p><h1 id="指针数组-p-n"><a href="#指针数组-p-n" class="headerlink" title="指针数组 *p[n]"></a>指针数组 *p[n]</h1><p>指针数组：是数组——装着指针的数组。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a = 1;</span><br><span class="line">int b = 2;</span><br><span class="line">int* p[2];</span><br><span class="line">p[0] = &amp;a;</span><br><span class="line">p[1] = &amp;b;</span><br><span class="line">printf(&quot;%p\n&quot;, p[0]); //a的地址</span><br><span class="line">printf(&quot;%p\n&quot;, &amp;a); //a的地址</span><br><span class="line">printf(&quot;%p\n&quot;, p[1]); //b的地址</span><br><span class="line">printf(&quot;%p\n&quot;, &amp;b); //b的地址</span><br><span class="line">printf(&quot;%d\n&quot;, *p[0]); //p[0]表示a的地址，则*p[0]表示a的值</span><br><span class="line">printf(&quot;%d\n&quot;, *p[1]); //p[1]表示b的地址，则*p[1]表示b的值</span><br><span class="line">//将二维数组赋给指针数组</span><br><span class="line">int* pp[3]; //一个一维数组内存放着三个指针变量，分别是p[0]、p[1]、p[2]，所以要分别赋值</span><br><span class="line">int c[3][4];</span><br><span class="line">for (int i = 0; i &lt; 3; i++)</span><br><span class="line">pp[i] = c[i];</span><br><span class="line">int k;</span><br><span class="line">scanf_s(&quot;%d&quot;, &amp;k);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/zzsz.png" alt="指针数组"></p><p>最后，从上文来看：</p><p>数组指针是一个指针变量，占有内存中一个指针的存储空间；</p><p>指针数组是多个指针变量，以数组的形式存储在内存中，占有多个指针的存储空间。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>提示：这里对文章进行总结：<br>1.数组指针简单理解为“数组的指针”，首先这个变量是一个指针，其次，”数组”修饰这个指针，意思是说这个指针存放着一个数组的首地址，或者说这个指针指向一个数组的首地址。<br>2.指针数组简单理解为“指针的数组”，首先这个变量是一个数组，其次，”指针p”修饰这个数组，意思是说这个数组的所有元素都是指针类型。<br>3.关于函数传参的问题：传递的参数：int *p[4] -&gt; 匹配需要的形参：int **p（指针数组或者二级指针）；传递的参数：int (*p)[4] -&gt; 匹配需要的形参：int (*p)[4]（不变）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数组 指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>my first blog</title>
      <link href="/2023/04/19/my-first-blog/"/>
      <url>/2023/04/19/my-first-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><strong>这是我的第一篇博客</strong><br><em>在 Hexo 框架搭建的博客网站首页会显示文章的内容（默认显示文章的全部内容）</em><span id="more"></span></p><p><em>，如果当文章太长的时候就会显得十分冗余，所以我们有必要对其进行精简，只需在文章中使用 <!--more-->标志，表示只会显示标志前面的内容</em><br><a href="https://www.csdn.net/?ydreferer=aHR0cHM6Ly93d3cuYmFpZHUuY29tL2xpbms/dXJsPUxjdGIyOVNjc2dZOGV5eWZtdGZMT0NWVWYyUWlGNEs0R1FmS1Bxcll3NmEmd2Q9JmVxaWQ9ODFkMjUwYjMwMDA5ODAwMTAwMDAwMDA2NjQzZmI2ZTg=">csdn地址</a></p><p><img src="/../images/1.png" alt="1"></p><p><img src="https://pic1.zhimg.com/80/v2-ab55e2fc1fafd7b87c36ef40e9a61dc0_720w.webp" alt="baidu"><br>图片显示</p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> firstblog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/04/19/hello-world/"/>
      <url>/2023/04/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
